{-# LANGUAGE OverloadedStrings #-}

module PureScript where

import AvailableClasses
import qualified Data.Bifunctor as BiF
import qualified Data.Maybe as Maybe
import Data.Text (Text)
import qualified Data.Text as Text
import Text.Parsec ((<|>))
import qualified Text.Parsec as P
import Text.Parsec.Text (Parser)
import Text.Render

data AST
  = TailwindClass String
  | CharNode
  deriving (Eq, Ord, Show)

node :: Parser AST
node = P.try className <|> charNode

className :: Parser AST
className = TailwindClass <$> (P.string "T." *> P.many P.alphaNum)

charNode :: Parser AST
charNode = CharNode <$ P.anyChar

getClassName :: AST -> Maybe String
getClassName (TailwindClass name) = Just name
getClassName _ = Nothing

usedTailwindClassNames :: FilePath -> Text -> Either String [String]
usedTailwindClassNames path contents =
  BiF.first show $ P.parse parser path contents
  where
    parser = Maybe.mapMaybe getClassName <$> P.many node

tailwindModule :: [CssClass] -> Text
tailwindModule usedClasses =
  Text.unlines
    [ "-- | Autogenerated from tailwind.css",
      "module Tailwind where",
      "",
      "import Halogen.HTML.Core (ClassName(..))",
      "",
      classes
    ]
  where
    classes = Text.intercalate "\n" $ map (Text.pack . render) usedClasses
